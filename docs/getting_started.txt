==========================
Getting Started Guide
==========================

Once you have installed pywinauto - how do you get going?
The very first necessary thing is to determine which accessibility 
technology (pywinauto's backend) could be used for your application.

The list of supported accessibility technologies on Windows:

 * **Win32 API** (``backend="win32"``) - a default backend for now
    - MFC, VB6, VCL, simple WinForms controls and most of the old legacy apps

 * **MS UI Automation** (``backend="uia"``)
    - WinForms, WPF, Store apps, Qt, browsers
    
    Notes: Chrome requires ``--force-renderer-accessibility`` cmd flag before 
    starting. Custom properties and controls are not supported because of 
    comtypes Python library restrictions.

Not supported: Java AWT/Swing, GTK+, Tkinter.

AT SPI on Linux and Apple Accessibility API are in the long term plans so far.


GUI Objects Inspection
----------------------
If you're still not sure which backend is most appropriate for you 
then try using object inspection tools that are available for free.

 * **Spy++** is included into MS Visual Studio distribution (even Express or 
   Community) and is accessible through Start menu. It uses Win32 API. It means 
   if Spy++ can show all the controls the ``"win32"`` backend is what you need. 
   *AutoIt Window Info* tool is a kind of Spy++ clone.


 * **Inspect.exe** is another great tool created by Microsoft. It's included into
   Windows SDK so that it can be found in the following location on x64 Windows: ::

        C:\Program Files (x86)\Windows Kits\<winver>\bin\x64


   Switch Inspect.exe into **UIA mode** (using MS UI Automation). If it can 
   show more controls and their properties than Spy++, probably the ``"uia"`` 
   backend is your choice.

If some or all controls are not visible to all the inspection tools it's still 
possible to control the application by generating mouse and keyboard events 
using basic modules mouse_ and keyboard_.

.. _mouse: code/pywinauto.mouse.html
.. _keyboard: code/pywinauto.keyboard.html


Entry Points for Automation
---------------------------

So you have an application, you know it supports one of the mentioned 
accessibility technologies. What's the next?

First you should start your application or connect to the existing app
instance. It can be done with an ``Application`` object. This is not just
a clone of ``subprocess.Popen``, but an entry point for further automation
limiting all the scope by a process boundaries. It's useful to control
potentially few instances of an application (you work with one instance
not bothering another ones).

 ::

    from pywinauto.application import Application
    app = Application(backend="uia").start('notepad.exe')
    
    # describe the window inside Notepad.exe process
    dlg = app.UntitledNotepad
    # wait till the window is open
    dlg.wait('visible')

If you want to navigate across process boundaries (say Win10 Calculator
surprisingly draws its widgets in more than one process) your entry point
is a ``Desktop`` object.

 ::

    from subprocess import Popen
    from pywinauto import Desktop
    
    Popen('calc.exe', shell=True)
    dlg = Desktop(backend="uia").Calculator
    dlg.wait('visible')

**Application** and **Desktop** objects are both backend-specific. So no need
to use backend name in further actions explicitly.


Window Specification
--------------------

It's a core concept for the high level pywinauto API. You are able to describe
any window or control approximately or in more details even if it doesn't exist
yet or already closed. Window specification also keeps an information about
matching/search algorithm that will be used to get real window/control.

Let's create detailed window specification for the window:

 ::

    >>> dlg_spec = app.window(title='Untitled - Notepad')
    
    >>> dlg_spec
    <pywinauto.application.WindowSpecification object at 0x0568B790>
    
    >>> dlg_spec.wrapper_object()
    <pywinauto.controls.win32_controls.DialogWrapper object at 0x05639B70>

Actual window lookup is done by ``wrapper_object()`` method. It returns some
wrapper for the real existing window/control or raises ``ElementNotFound``
exception. This wrapper can deal with the window/control sending actions or
retrieving data.

But Python can hide this ``wrapper_object()`` call so that you have more
compact code in production. The following statements do absolutely the same:

 ::

    dlg_spec.wrapper_object().minimize() # while debugging
    dlg_spec.minimize() # in production

There are many possible criteria for creating window specifications. These
are just a few examples.

 ::

    # can be multi-level
    app.window(title_re='.* - Notepad$').window(class_name='Edit')
    
    # can combine criteria
    dlg = Desktop(backend="uia").Calculator
    dlg.window(auto_id='num8Button', control_type='Button')

The list of possible criteria can be found in the
:func:`pywinauto.findwindows.find_elements()` function.


Attribute Resolution Magic
--------------------------

To be done.

Best match algorithm.
Attribute and dict-like access.


Look at the examples
--------------------

The following examples are included:
**Note**: Examples are language dependent - they will only work on the
language of product that they were programmed for. All examples have
been programmed for English Software except where highlighted.

- ``mspaint.py``         Control MSPaint
- ``notepad_fast.py``    Use fast timing settings to control Notepad
- ``notepad_slow.py``    Use slow timing settings to control Notepad
- ``notepad_item.py``    Use item rather then attribute access to control Notepad.
- ``misc_examples.py``    Show some exceptions and how to get control identifiers.
- ``save_from_internet_explorer.py`` Save a Web Page from Internet Explorer.
- ``save_from_firefox.py``  Save a Web Page from Firefox.
- ``get_winrar_info.py``    Example of how to do multilingual automation.
  This is not an ideal example (works on French, Czech and German WinRar)
- ``forte_agent_sample.py``   Example of dealing with a complex application that
  is quite dynamic and gives different dialogs often when starting.
- ``windowmediaplayer.py``  Just another example - deals with check boxes in a
  ListView.
- ``test_sakura.py``, ``test_sakura2.py``    Two examples of automating a Japanase product.

Automate notepad at the command line
-------------------------------------

Please find below a sample run ::

	      C:\>python
	      Python 2.4.2 (#67, Sep 28 2005, 12:41:11) [MSC v.1310 32 bit (Intel)] on win32
	      Type "help", "copyright", "credits" or "license" for more information.
	(1)   >>> from pywinauto import application
	(2)   >>> app = application.Application()
	(3)   >>> app.start("Notepad.exe")
	      <pywinauto.application.Application object at 0x00AE0990>
	(4)   >>> app.Notepad.draw_outline()
	(5)   >>> app.Notepad.menu_select("Edit -> Replace")
	(6)   >>> app.Replace.print_control_identifiers()
	      Control Identifiers:
	      Static - 'Fi&nd what:'   (L1018, T159, R1090, B172)
	              'Fi&nd what:' 'Fi&nd what:Static' 'Static' 'Static0' 'Static1'
	      Edit - ''   (L1093, T155, R1264, B175)
	              'Edit' 'Edit0' 'Edit1' 'Fi&nd what:Edit'
	      Static - 'Re&place with:'   (L1018, T186, R1090, B199)
	              'Re&place with:' 'Re&place with:Static' 'Static2'
	      Edit - ''   (L1093, T183, R1264, B203)
	              'Edit2' 'Re&place with:Edit'
	      Button - 'Match &case'   (L1020, T245, R1109, B265)
	              'CheckBox2' 'Match &case' 'Match &caseCheckBox'
	      Button - '&Find Next'   (L1273, T151, R1348, B174)
	              '&Find Next' '&Find NextButton' 'Button' 'Button0' 'Button1'
	      Button - '&Replace'   (L1273, T178, R1348, B201)
	              '&Replace' '&ReplaceButton' 'Button2'
	      Button - 'Replace &All'   (L1273, T206, R1348, B229)
	              'Button3' 'Replace &All' 'Replace &AllButton'
	      Button - 'Cancel'   (L1273, T233, R1348, B256)
	              'Button4' 'Cancel' 'CancelButton'
	(7)   >>> app.Replace.Cancel.click()
	(8)   >>> app.Notepad.Edit.type_keys("Hi from Python interactive prompt %s" % str(dir()), with_spaces = True)
	      <pywinauto.controls.win32_controls.EditWrapper object at 0x00DDC2D0>
	(9)   >>> app.Notepad.menu_select("File -> Exit")
	(10)  >>> app.Notepad.No.click()
	      >>>

1. Import the pywinauto.application module (usually the only module you need
   to import directly)
2. Create an Application instance. All access to the application is done
   through this object.
3. We have created an Application instance in step 2 but we did not supply
   any information on the Windows application it referred to. By using the
   start() method we execute that application and connect it to the
   Application instance app.
4. Draw a green rectangle around the Notepad dialog - so that we know we have
   the correct window.
5. Select the Replace item from the Edit Menu on the Notepad Dialog of the
   application that app is connected to.
   This action will make the Replace dialog appear.
6. Print the identifiers for the controls on the Replace dialog, for
   example the 1st edit control on the Replace dialog can be referred to by
   any of the following identifiers::

     app.Replace.Edit
     app.Replace.Edit0
     app.Replace.Edit1
     app.FindwhatEdit

   The last is the one that gives the user reading the script aftewards the
   best idea of what the script does.
7. Close the Replace dialog. (In a script file it is safer to use close_click()
   rather than click() because close_click() waits a little longer to give windows
   time to close the dialog.)
8. Let's type some text into the Notepad text area. Without the ``with_spaces``
   argument spaces would not be typed. Please see documentation for SendKeys
   for this method as it is a thin wrapper around SendKeys.
9. Ask to exit Notepad
10. We will be asked if we want to save - click on the "No" button.

